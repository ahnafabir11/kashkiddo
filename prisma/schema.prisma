// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionReason {
  TASK
  REFERRAL
  WITHDRAW
}

enum TaskSubmissionStatus {
  PENDING
  COMPLETED
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  password       String
  verified       Boolean         @default(false)
  active         Boolean         @default(false)
  balance        Int             @default(0)
  tansaction     Tansaction[]
  role           Role            @default(USER)
  activation     Activation?
  payments       Payment[]
  referrals      Referral[]      @relation("ReferredBy") // Referrals made by this user
  referredBy     Referral?       @relation("ReferredTo") // Referral that brought this user
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  submittedTasks SubmittedTask[]
}

model Activation {
  id            String   @id @default(cuid())
  phoneNumber   String
  transactionId String
  complete      Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id          String   @id @default(cuid())
  amount      Int
  phoneNumber String
  complete    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Referral {
  id           String   @id @default(cuid())
  referredTo   User     @relation("ReferredTo", fields: [referredToId], references: [id])
  referredToId String   @unique
  referredBy   User     @relation("ReferredBy", fields: [referredById], references: [id])
  referredById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tansaction {
  id        String            @id @default(cuid())
  amount    Int
  type      TransactionType
  reason    TransactionReason
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime          @default(now())
}

model Task {
  id          String          @id @default(cuid())
  amount      Int
  title       String
  description String
  url         String
  cover       String?
  photos      String[]
  deadline    DateTime
  submittedBy SubmittedTask[]
}

model SubmittedTask {
  id          String               @id @default(cuid())
  description String?
  screenshots String[]
  status      TaskSubmissionStatus @default(PENDING)
  task        Task                 @relation(fields: [taskId], references: [id])
  taskId      String
  user        User                 @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@unique([taskId, userId])
}
